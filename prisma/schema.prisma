// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model CopyPasta {
    id        String       @id @default(uuid())
    content   String
    source    OriginSource @default(Other)
    sourceUrl String?
    postedAt  DateTime     @default(now())
    imageUrl  String?

    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @default(now()) @updatedAt
    approvedAt DateTime?
    deletedAt  DateTime?

    approvedBy   User?   @relation(name: "approvedBy", fields: [approvedById], references: [id])
    approvedById String?

    createdBy        User                      @relation(name: "createdBy", fields: [createdById], references: [id])
    createdById      String
    CopyPastasOnTags CopyPastasOnTags[]
    Reactions        Reaction[]
    collections      CollectionsOnCopyPastas[]
}

model Tag {
    id               String             @id @default(uuid())
    name             String
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    CopyPastasOnTags CopyPastasOnTags[]
}

model CopyPastasOnTags {
    copyPastas  CopyPasta @relation(fields: [copyPastaId], references: [id])
    copyPastaId String
    tags        Tag       @relation(fields: [tagId], references: [id])
    tagId       String

    @@unique([copyPastaId, tagId])
}

model Collection {
    id          String                    @id @default(uuid())
    name        String
    description String?
    createdAt   DateTime                  @default(now())
    updatedAt   DateTime                  @updatedAt
    createdBy   User                      @relation(fields: [createdById], references: [id])
    createdById String
    copyPastas  CollectionsOnCopyPastas[]
}

model CollectionsOnCopyPastas {
    collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
    collectionId String
    copyPasta    CopyPasta  @relation(fields: [copyPastaId], references: [id])
    copyPastaId  String

    @@unique([collectionId, copyPastaId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    oauth_token              String?
    oauth_token_secret       String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                  String      @id @default(cuid())
    name                String?
    email               String?     @unique
    emailVerified       DateTime?
    image               String?
    accounts            Account[]
    sessions            Session[]
    CopyPastaApprovedBy CopyPasta[] @relation("approvedBy")
    CopyPastaCreatedBy  CopyPasta[] @relation("createdBy")
    role                UserRole    @default(User)

    rankId    String?
    rank      Rank?      @relation(fields: [rankId], references: [id])
    Reactions Reaction[]

    avatarSeed  String?
    username    String?      @unique
    collections Collection[]
}

model Rank {
    id       String @id @default(uuid())
    title    String
    minCount Int    @unique
    User     User[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Reaction {
    id          String      @id @default(uuid())
    copyPasta   CopyPasta   @relation(fields: [copyPastaId], references: [id])
    copyPastaId String
    user        User        @relation(fields: [userId], references: [id])
    userId      String
    emotion     EmotionType
    createdAt   DateTime    @default(now())

    @@unique([copyPastaId, userId])
}

enum EmotionType {
    Kocak
    Hah
    Setuju
    Marah
}

enum OriginSource {
    Twitter
    Facebook
    Other
}

enum UserRole {
    User
    Admin
    SuperAdmin
}
